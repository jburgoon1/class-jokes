{"ast":null,"code":"var _jsxFileName = \"/Users/julieburgoon/Desktop/react-jokes-classes/src/JokeList.js\";\nimport React, { useState, useEffect, Component } from \"react\";\nimport axios from \"axios\";\nimport Joke from \"./Joke\";\nimport \"./JokeList.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass jokeList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      jokes: []\n    };\n    this.generateNewJokes = this.generateNewJokes.bind(this);\n    this.vote = this.vote.bind(this);\n    this.getJokes = this.getJokes.bind(this);\n  }\n\n  componentDidMount() {\n    if (this.state.jokes.length < this.props.numJokesToGet) this.getJokes();\n  }\n\n  componentDidUpdate() {\n    if (this.state.jokes.length < this.props.numJokesToGet) this.getJokes();\n  }\n\n  generateNewJokes() {\n    this.setState({\n      jokes: []\n    });\n  }\n\n  vote(id, delta) {\n    this.setState(joke => ({\n      joke: joke.jokes.map(j => j.id === id ? { ...j,\n        votes: j.votes + delta\n      } : j)\n    }));\n  }\n\n  async getJokes() {\n    let j = this.state.jokes;\n    let seenJokes = new Set(j.map(joke => joke.id));\n\n    try {\n      while (j.length < this.props.numJokesToGet) {\n        let res = await axios.get(\"https://icanhazdadjoke.com\", {\n          headers: {\n            Accept: \"application/json\"\n          }\n        });\n        let {\n          status,\n          ...jokeObj\n        } = res.data;\n\n        if (!seenJokes.has(jokeObj.id)) {\n          seenJokes.add(jokeObj.id);\n          j.push({ ...jokeObj,\n            votes: 0\n          });\n        } else {\n          console.error(\"duplicate found!\");\n        }\n      }\n\n      this.setState({\n        jokes: j\n      });\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  render() {\n    let sortedJokes = [...this.state.jokes].sort((a, b) => b.votes - a.votes);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"JokeList\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"JokeList-getmore\",\n        onClick: this.generateNewJokes,\n        children: \"Get New Jokes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), sortedJokes.map(j => /*#__PURE__*/_jsxDEV(Joke, {\n        text: j.joke,\n        id: j.id,\n        votes: j.votes,\n        vote: this.vote\n      }, j.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n/* empty joke list and then call getJokes */\n\n/* change vote for this id by delta (+1 or -1) */\n\n/* render: either loading spinner or list of sorted jokes. */\n\n\njokeList.defaultProps = {\n  numJokesToGet: 10\n};\nexport default jokeList;","map":{"version":3,"sources":["/Users/julieburgoon/Desktop/react-jokes-classes/src/JokeList.js"],"names":["React","useState","useEffect","Component","axios","Joke","jokeList","constructor","props","state","jokes","generateNewJokes","bind","vote","getJokes","componentDidMount","length","numJokesToGet","componentDidUpdate","setState","id","delta","joke","map","j","votes","seenJokes","Set","res","get","headers","Accept","status","jokeObj","data","has","add","push","console","error","e","log","render","sortedJokes","sort","a","b","defaultProps"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, Component } from \"react\";\nimport axios from \"axios\";\nimport Joke from \"./Joke\";\nimport \"./JokeList.css\";\n\n\n\nclass jokeList extends Component{\n  static defaultProps = {\n    numJokesToGet: 10\n  };\n  constructor(props){\n    super(props)\n    this.state = {jokes:[]}\n    this.generateNewJokes= this.generateNewJokes.bind(this)\n    this.vote = this.vote.bind(this)\n    this.getJokes = this.getJokes.bind(this)\n  }\n\n  componentDidMount(){\n    if (this.state.jokes.length < this.props.numJokesToGet) this.getJokes();\n  }\n\n  componentDidUpdate(){\n    if(this.state.jokes.length < this.props.numJokesToGet) this.getJokes()\n  }\n  generateNewJokes() {\n    this.setState({jokes:[]});\n  }\n\n vote(id, delta) {\n    this.setState(joke =>({joke:joke.jokes.map(j => (j.id === id ? { ...j, votes: j.votes + delta } : j))}))\n }\n  \n\n  async getJokes() {\n    let j = this.state.jokes;\n    let seenJokes = new Set(j.map(joke => joke.id));\n    try {\n      while (j.length < this.props.numJokesToGet) {\n        let res = await axios.get(\"https://icanhazdadjoke.com\", {\n          headers: { Accept: \"application/json\" }\n        });\n        let { status, ...jokeObj } = res.data;\n\n        if (!seenJokes.has(jokeObj.id)) {\n          seenJokes.add(jokeObj.id);\n          j.push({ ...jokeObj, votes: 0 });\n        } else {\n          console.error(\"duplicate found!\");\n        }\n      }\n      this.setState({jokes:j});\n    } catch (e) {\n      console.log(e);\n    }\n    \n   \n  };\n\n  \n \n\n   render(){\n    let sortedJokes = [...this.state.jokes].sort((a, b) => b.votes - a.votes);\n    return (\n      <div className=\"JokeList\">\n        <button className=\"JokeList-getmore\" onClick={this.generateNewJokes}>\n          Get New Jokes\n        </button>\n  \n        {sortedJokes.map(j => (\n          <Joke text={j.joke} key={j.id} id={j.id} votes={j.votes} vote={this.vote} />\n        ))}\n      </div>\n    );\n   }\n}\n      \n\n \n\n  /* empty joke list and then call getJokes */\n\n  \n\n  /* change vote for this id by delta (+1 or -1) */\n\n  \n\n  /* render: either loading spinner or list of sorted jokes. */\n\n \n  \n  \n\n\nexport default jokeList;\n"]},"metadata":{},"sourceType":"module"}